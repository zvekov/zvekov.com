{"remainingRequest":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dev/Projects/new/zvekov/frontend_gridsome/src/components/atoms/search/List.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/src/components/atoms/search/List.vue","mtime":1603649385932},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/cache-loader/dist/cjs.js","mtime":1603648050611},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/babel-loader/lib/index.js","mtime":1603648050172},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/cache-loader/dist/cjs.js","mtime":1603648050611},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/vue-loader/lib/index.js","mtime":1603648055436}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nfunction findInString(haystack, needle) {\n\treturn [...haystack.matchAll(new RegExp(needle, 'gi'))].map((match) => match.index);\n}\nfunction findPartsInString(haystack, needles) {\n\treturn needles.split(' ').map((needle) => findInString(haystack, needle).map((index) => [index, index + needle.length])).flat();\n}\nfunction numbersToRanges(positions, leeway = 1) {\n\treturn [...new Set(positions)].sort((a, b) => a - b).reduce((p, c) => {\n\t\tif (!p.length) return [[c, c]];\n\t\tif (p[p.length - 1][1] !== c - leeway) return [...p, [c, c]];\n\t\tp[p.length -1 ][1] = c;\n\t\treturn p;\n\t}, []);\n}\nfunction rangeToNumbers(start, end) {\n\treturn [...Array(end).keys()].slice(start);\n}\nfunction rangesToNumbers(ranges) {\n\treturn [...new Set(ranges.map((range) => rangeToNumbers(...range)).flat())].sort((a, b) => a - b);\n}\nfunction uniqueArray(list) {\n\treturn [...new Set(list)];\n}\nfunction deduplicateRanges(ranges) {\n\treturn numbersToRanges(rangesToNumbers(ranges));\n}\nfunction positions(haystack, needle) {\n\treturn findPartsInString(haystack, needle);\n}\nfunction tag(string, ranges, tag = 'u') {\n\treturn ranges.reverse().reduce((p, c) => insertTag(p, tag, c[0], c[1] + 1), string);\n}\nfunction insertString(string, insert, position) {\n\treturn position > string.length ? string : [string.slice(0, position), insert, string.slice(position)].join('');\n}\nfunction insertTag(string, tag, start, end) {\n\treturn insertString(insertString(string, `</${tag}>`, end), `<${tag}>`, start);\n}\nexport default {\n\tprops: ['value'],\n\tdata() {\n\t\treturn {\n\t\t\titems: [],\n\t\t};\n\t},\n\tcomputed: {\n\t\tsearchResults() {\n\t\t\tif (this.value.length < 3) return [];\n\t\t\treturn this.$search.search({query: this.value, limit: 999});\n\t\t}\n\t},\n\tmethods: {\n\t\tboldNew(result) {\n\t\t\treturn tag(result, deduplicateRanges(findPartsInString(result, this.value)));\n\t\t},\n\t\tbold(result) {\n\t\t\tconst pos = result.toLowerCase().indexOf(this.value.toLowerCase());\n\t\t\treturn pos === -1 ? result : `${result.substr(0, pos)}<b>${result.substr(pos, this.value.length)}</b>${result.substr(pos + this.value.length)}`;\n\t\t},\n\t},\n};\n",{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"List.vue","sourceRoot":"src/components/atoms/search","sourcesContent":["<template>\n\t<ul v-if=\"value.length >= 3\" class=\"font-medium\">\n\t\t<li v-for=\"result in searchResults\" :key=\"result.id\">\n\t\t\t<g-link :to=\"result.path\" :title=\"result.index\"><span v-html=\"boldNew(result.title)\" /></g-link>\n\t\t</li>\n\t\t<li v-if=\"!searchResults.length\">\n\t\t\t<em>Sorry, no results found</em>\n\t\t</li>\n\t</ul>\n</template>\n\n<script>\n\tfunction findInString(haystack, needle) {\n\t\treturn [...haystack.matchAll(new RegExp(needle, 'gi'))].map((match) => match.index);\n\t}\n\tfunction findPartsInString(haystack, needles) {\n\t\treturn needles.split(' ').map((needle) => findInString(haystack, needle).map((index) => [index, index + needle.length])).flat();\n\t}\n\tfunction numbersToRanges(positions, leeway = 1) {\n\t\treturn [...new Set(positions)].sort((a, b) => a - b).reduce((p, c) => {\n\t\t\tif (!p.length) return [[c, c]];\n\t\t\tif (p[p.length - 1][1] !== c - leeway) return [...p, [c, c]];\n\t\t\tp[p.length -1 ][1] = c;\n\t\t\treturn p;\n\t\t}, []);\n\t}\n\tfunction rangeToNumbers(start, end) {\n\t\treturn [...Array(end).keys()].slice(start);\n\t}\n\tfunction rangesToNumbers(ranges) {\n\t\treturn [...new Set(ranges.map((range) => rangeToNumbers(...range)).flat())].sort((a, b) => a - b);\n\t}\n\tfunction uniqueArray(list) {\n\t\treturn [...new Set(list)];\n\t}\n\tfunction deduplicateRanges(ranges) {\n\t\treturn numbersToRanges(rangesToNumbers(ranges));\n\t}\n\tfunction positions(haystack, needle) {\n\t\treturn findPartsInString(haystack, needle);\n\t}\n\tfunction tag(string, ranges, tag = 'u') {\n\t\treturn ranges.reverse().reduce((p, c) => insertTag(p, tag, c[0], c[1] + 1), string);\n\t}\n\tfunction insertString(string, insert, position) {\n\t\treturn position > string.length ? string : [string.slice(0, position), insert, string.slice(position)].join('');\n\t}\n\tfunction insertTag(string, tag, start, end) {\n\t\treturn insertString(insertString(string, `</${tag}>`, end), `<${tag}>`, start);\n\t}\n\texport default {\n\t\tprops: ['value'],\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\titems: [],\n\t\t\t};\n\t\t},\n\t\tcomputed: {\n\t\t\tsearchResults() {\n\t\t\t\tif (this.value.length < 3) return [];\n\t\t\t\treturn this.$search.search({query: this.value, limit: 999});\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tboldNew(result) {\n\t\t\t\treturn tag(result, deduplicateRanges(findPartsInString(result, this.value)));\n\t\t\t},\n\t\t\tbold(result) {\n\t\t\t\tconst pos = result.toLowerCase().indexOf(this.value.toLowerCase());\n\t\t\t\treturn pos === -1 ? result : `${result.substr(0, pos)}<b>${result.substr(pos, this.value.length)}</b>${result.substr(pos + this.value.length)}`;\n\t\t\t},\n\t\t},\n\t};\n</script>\n\n<style scoped lang=\"postcss\">\n\tli {\n\t\t@apply m-2;\n\t}\n</style>"]}]}