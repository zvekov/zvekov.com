{"remainingRequest":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-pwa/gridsome.client.js","dependencies":[{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-pwa/gridsome.client.js","mtime":1603648052334},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/cache-loader/dist/cjs.js","mtime":1603648050611},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/babel-loader/lib/index.js","mtime":1603648050172}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.find\";\nimport \"core-js/modules/es.array.index-of\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.array.splice\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.split\";\nimport \"core-js/modules/es.string.link\";\n\nvar _require = require('register-service-worker'),\n    register = _require.register;\n\nvar clientConfig = function clientConfig(Vue, options, context) {\n  var head = context.head,\n      isClient = context.isClient;\n\n  if (process.env.NODE_ENV === 'production' && isClient) {\n    register(options.serviceWorkerPath, {\n      ready: function ready() {\n        console.log('Service worker is active.');\n      },\n      registered: function registered(registration) {\n        console.log('Service worker has been registered.');\n      },\n      cached: function cached(registration) {\n        console.log('Content has been cached for offline use.');\n      },\n      updatefound: function updatefound(registration) {\n        console.log('New content is downloading.');\n      },\n      updated: function updated(registration) {\n        registration.waiting.postMessage({\n          type: 'SKIP_WAITING'\n        });\n        console.log('New content is available; please refresh.');\n      },\n      offline: function offline() {\n        console.log('No internet connection found. App is running in offline mode.');\n      },\n      error: function error(_error) {\n        console.error('Error during service worker registration:', _error);\n      }\n    });\n  }\n\n  var iconsDir = 'assets/static/';\n  var iconName = options.icon.split('/').slice(-1)[0];\n  var msTileImage = \"/\".concat(iconsDir).concat(iconName, \"-144x144.png\");\n  head.link.push({\n    rel: 'manifest',\n    href: options.manifestPath.replace('\\\\', '/')\n  });\n\n  if (options.svgFavicon) {\n    var emptyIcon = head.link.find(function (x) {\n      return x.rel === 'icon' && x.href === 'data:,';\n    });\n\n    if (emptyIcon) {\n      var index = head.link.indexOf(emptyIcon);\n      head.link.splice(index, 1);\n    }\n\n    head.link.push({\n      rel: 'icon',\n      type: 'image/svg+xml',\n      href: options.svgFavicon\n    });\n    head.link.push({\n      rel: 'alternate icon',\n      href: 'favicon.ico'\n    });\n  }\n\n  if (options.appleMaskIcon && options.appleMaskIconColor) {\n    head.link.push({\n      rel: 'mask-icon',\n      href: options.appleMaskIcon,\n      color: options.appleMaskIconColor\n    });\n  }\n\n  head.meta.push({\n    name: 'theme-color',\n    content: options.themeColor\n  });\n  head.meta.push({\n    name: 'apple-mobile-web-app-capable',\n    content: 'yes'\n  });\n  head.meta.push({\n    name: 'apple-mobile-web-app-status-bar-style',\n    content: options.statusBarStyle\n  });\n  head.meta.push({\n    name: 'apple-mobile-web-app-title',\n    content: options.title\n  });\n  head.meta.push({\n    name: 'application-name',\n    content: options.title\n  });\n\n  if (options.msTileColor) {\n    head.meta.push({\n      name: 'msapplication-TileColor',\n      content: options.msTileColor\n    });\n  }\n\n  head.meta.push({\n    name: 'msapplication-TileImage',\n    content: msTileImage\n  });\n};\n\nexport default clientConfig;",{"version":3,"sources":["/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-pwa/gridsome.client.js"],"names":["require","register","clientConfig","Vue","options","context","head","isClient","process","env","NODE_ENV","serviceWorkerPath","ready","console","log","registered","registration","cached","updatefound","updated","waiting","postMessage","type","offline","error","iconsDir","iconName","icon","split","slice","msTileImage","link","push","rel","href","manifestPath","replace","svgFavicon","emptyIcon","find","x","index","indexOf","splice","appleMaskIcon","appleMaskIconColor","color","meta","name","content","themeColor","statusBarStyle","title","msTileColor"],"mappings":"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","sourcesContent":["const { register } = require('register-service-worker');\n\nconst clientConfig = function (Vue, options, context) {\n  let {head, isClient} = context;\n  if (process.env.NODE_ENV === 'production' && isClient) {\n    register(options.serviceWorkerPath, {\n      ready () {\n        console.log('Service worker is active.')\n      },\n      registered (registration) {\n        console.log('Service worker has been registered.')\n      },\n      cached (registration) {\n        console.log('Content has been cached for offline use.')\n      },\n      updatefound (registration) {\n        console.log('New content is downloading.')\n      },\n      updated (registration) {\n        registration.waiting.postMessage({ type: 'SKIP_WAITING' });  \n        console.log('New content is available; please refresh.')\n      },\n      offline () {\n        console.log('No internet connection found. App is running in offline mode.')\n      },\n      error (error) {\n        console.error('Error during service worker registration:', error)\n      }\n    })\n  }\n\n  const iconsDir = 'assets/static/';\n  const iconName = options.icon.split('/').slice(-1)[0];\n  const msTileImage = `/${iconsDir}${iconName}-144x144.png`;\n\n  head.link.push({\n    rel: 'manifest',\n    href: options.manifestPath.replace('\\\\', '/')\n  })\n\n  if (options.svgFavicon) {\n    var emptyIcon = head.link.find(x => x.rel === 'icon' && x.href === 'data:,');\n    if (emptyIcon) {\n      const index = head.link.indexOf(emptyIcon);\n      head.link.splice(index, 1);\n    }\n\n    head.link.push({\n      rel: 'icon',\n      type: 'image/svg+xml',\n      href: options.svgFavicon\n    });\n\n    head.link.push({\n      rel: 'alternate icon',\n      href: 'favicon.ico',\n    });\n  }\n\n  if (options.appleMaskIcon && options.appleMaskIconColor) {\n    head.link.push({\n      rel: 'mask-icon',\n      href: options.appleMaskIcon,\n      color: options.appleMaskIconColor,\n    })\n  }\n\n  head.meta.push({\n    name: 'theme-color',\n    content: options.themeColor\n  })\n\n  head.meta.push({\n    name: 'apple-mobile-web-app-capable',\n    content: 'yes'\n  })\n\n  head.meta.push({\n    name: 'apple-mobile-web-app-status-bar-style',\n    content: options.statusBarStyle\n  })\n\n  head.meta.push({\n    name: 'apple-mobile-web-app-title',\n    content: options.title\n  })\n\n  head.meta.push({\n    name: 'application-name',\n    content: options.title\n  })\n\n  if (options.msTileColor) {\n    head.meta.push({\n      name: 'msapplication-TileColor',\n      content: options.msTileColor\n    })\n  }\n  \n  head.meta.push({\n    name: 'msapplication-TileImage',\n    content: msTileImage\n  })\n}\n\nexport default clientConfig;\n"]}]}