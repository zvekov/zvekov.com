{"remainingRequest":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-flexsearch/gridsome.client.js","dependencies":[{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-flexsearch/gridsome.client.js","mtime":1603648052318},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/cache-loader/dist/cjs.js","mtime":1603648050611},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/babel-loader/lib/index.js","mtime":1603648050172}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.includes\";\nimport \"core-js/modules/es.object.from-entries\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.string.includes\";\nimport _typeof from \"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/@babel/runtime/helpers/esm/asyncIterator\";\nimport FlexSearch from 'flexsearch';\nimport cjson from 'compressed-json';\nimport pMap from 'p-map';\nexport default function (_x, _x2, _x3) {\n  return _ref2.apply(this, arguments);\n}\n\nfunction _ref2() {\n  _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(Vue, options, _ref) {\n    var isClient, router, flexsearch, _options$chunk, chunk, _options$compress, compress, _options$autoFetch, autoFetch, _options$autoSetup, autoSetup, searchFields, pathPrefix, siteUrl, basePath, loadNormalMode, loadChunkMode, search, loaded, pathsToLoad;\n\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            isClient = _ref.isClient, router = _ref.router;\n            flexsearch = options.flexsearch, _options$chunk = options.chunk, chunk = _options$chunk === void 0 ? false : _options$chunk, _options$compress = options.compress, compress = _options$compress === void 0 ? false : _options$compress, _options$autoFetch = options.autoFetch, autoFetch = _options$autoFetch === void 0 ? true : _options$autoFetch, _options$autoSetup = options.autoSetup, autoSetup = _options$autoSetup === void 0 ? true : _options$autoSetup, searchFields = options.searchFields, pathPrefix = options.pathPrefix, siteUrl = options.siteUrl;\n\n            if (!isClient) {\n              _context3.next = 25;\n              break;\n            }\n\n            basePath = pathPrefix && (process.env.NODE_ENV !== 'development' || location.origin === siteUrl) ? \"\".concat(pathPrefix, \"/flexsearch\") : '/flexsearch'; // Data fetch functions\n\n            loadNormalMode = /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(search) {\n                var searchIndex;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return fetch(\"\".concat(basePath, \".json\")).then(function (r) {\n                          return r.json();\n                        });\n\n                      case 2:\n                        searchIndex = _context.sent;\n                        if (compress) searchIndex = cjson.decompress(searchIndex);\n                        search[\"import\"](searchIndex, {\n                          serialize: false\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function loadNormalMode(_x4) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            loadChunkMode = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(search) {\n                var _yield$fetch$then, index, docs, fetchData, searchIndex, searchDocs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, id, data;\n\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return fetch(\"\".concat(basePath, \"/manifest.json\")).then(function (r) {\n                          return r.json();\n                        });\n\n                      case 2:\n                        _yield$fetch$then = _context2.sent;\n                        index = _yield$fetch$then.index;\n                        docs = _yield$fetch$then.docs;\n\n                        fetchData = function fetchData(id) {\n                          return fetch(\"\".concat(basePath, \"/\").concat(id, \".json\")).then(function (r) {\n                            return r.json();\n                          }).then(function (j) {\n                            return compress ? cjson.decompress(j) : j;\n                          });\n                        };\n\n                        _context2.next = 8;\n                        return pMap(index, function (id) {\n                          return fetchData();\n                        });\n\n                      case 8:\n                        searchIndex = _context2.sent;\n                        search[\"import\"](searchIndex, {\n                          index: true,\n                          doc: false,\n                          serialize: false\n                        });\n                        searchDocs = {};\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _context2.prev = 13;\n                        _iterator = _asyncIterator(docs);\n\n                      case 15:\n                        _context2.next = 17;\n                        return _iterator.next();\n\n                      case 17:\n                        _step = _context2.sent;\n                        _iteratorNormalCompletion = _step.done;\n                        _context2.next = 21;\n                        return _step.value;\n\n                      case 21:\n                        _value = _context2.sent;\n\n                        if (_iteratorNormalCompletion) {\n                          _context2.next = 31;\n                          break;\n                        }\n\n                        id = _value;\n                        _context2.next = 26;\n                        return fetchData(id);\n\n                      case 26:\n                        data = _context2.sent;\n                        searchDocs = _objectSpread(_objectSpread({}, searchDocs), Object.fromEntries(data));\n\n                      case 28:\n                        _iteratorNormalCompletion = true;\n                        _context2.next = 15;\n                        break;\n\n                      case 31:\n                        _context2.next = 37;\n                        break;\n\n                      case 33:\n                        _context2.prev = 33;\n                        _context2.t0 = _context2[\"catch\"](13);\n                        _didIteratorError = true;\n                        _iteratorError = _context2.t0;\n\n                      case 37:\n                        _context2.prev = 37;\n                        _context2.prev = 38;\n\n                        if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n                          _context2.next = 42;\n                          break;\n                        }\n\n                        _context2.next = 42;\n                        return _iterator[\"return\"]();\n\n                      case 42:\n                        _context2.prev = 42;\n\n                        if (!_didIteratorError) {\n                          _context2.next = 45;\n                          break;\n                        }\n\n                        throw _iteratorError;\n\n                      case 45:\n                        return _context2.finish(42);\n\n                      case 46:\n                        return _context2.finish(37);\n\n                      case 47:\n                        search[\"import\"]([searchDocs], {\n                          index: false,\n                          doc: true,\n                          serialize: false\n                        });\n\n                      case 48:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[13, 33, 37, 47], [38,, 42, 46]]);\n              }));\n\n              return function loadChunkMode(_x5) {\n                return _ref4.apply(this, arguments);\n              };\n            }(); // Manually setup the Flexsearch instance\n\n\n            if (autoSetup) {\n              _context3.next = 9;\n              break;\n            }\n\n            Vue.prototype.$flexsearch = {\n              flexsearch: _objectSpread(_objectSpread({}, flexsearch), {}, {\n                doc: {\n                  id: 'id',\n                  field: searchFields\n                }\n              }),\n              basePath: basePath,\n              loadIndex: loadNormalMode\n            };\n            return _context3.abrupt(\"return\");\n\n          case 9:\n            // Setup global Flexsearch Instance\n            search = new FlexSearch(_objectSpread(_objectSpread({}, flexsearch), {}, {\n              doc: {\n                id: 'id',\n                field: searchFields\n              }\n            }));\n            Vue.prototype.$search = search;\n            Vue.prototype.$searchOptions = {\n              basePath: basePath\n            };\n\n            if (autoFetch) {\n              _context3.next = 14;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 14:\n            if (!(typeof autoFetch === 'string' || _typeof(autoFetch) === 'object')) {\n              _context3.next = 20;\n              break;\n            }\n\n            loaded = false;\n            pathsToLoad = typeof autoFetch === 'string' ? [autoFetch] : autoFetch;\n            return _context3.abrupt(\"return\", router.afterEach(function (_ref5) {\n              var currentPath = _ref5.path;\n\n              if (pathsToLoad.includes(currentPath) && !loaded) {\n                loaded = true;\n                return chunk ? loadChunkMode(search) : loadNormalMode(search);\n              }\n            }));\n\n          case 20:\n            if (!chunk) {\n              _context3.next = 24;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", loadChunkMode(search));\n\n          case 24:\n            return _context3.abrupt(\"return\", loadNormalMode(search));\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _ref2.apply(this, arguments);\n}",{"version":3,"sources":["/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-flexsearch/gridsome.client.js"],"names":["FlexSearch","cjson","pMap","Vue","options","isClient","router","flexsearch","chunk","compress","autoFetch","autoSetup","searchFields","pathPrefix","siteUrl","basePath","process","env","NODE_ENV","location","origin","loadNormalMode","search","fetch","then","r","json","searchIndex","decompress","serialize","loadChunkMode","index","docs","fetchData","id","j","doc","searchDocs","data","Object","fromEntries","prototype","$flexsearch","field","loadIndex","$search","$searchOptions","loaded","pathsToLoad","afterEach","currentPath","path","includes"],"mappings":";;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AAEA;AAAA;AAAA;;;kEAAe,kBAAgBC,GAAhB,EAAqBC,OAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAgCC,YAAAA,QAAhC,QAAgCA,QAAhC,EAA0CC,MAA1C,QAA0CA,MAA1C;AACLC,YAAAA,UADK,GACkHH,OADlH,CACLG,UADK,mBACkHH,OADlH,CACOI,KADP,EACOA,KADP,+BACe,KADf,uCACkHJ,OADlH,CACsBK,QADtB,EACsBA,QADtB,kCACiC,KADjC,2CACkHL,OADlH,CACwCM,SADxC,EACwCA,SADxC,mCACoD,IADpD,4CACkHN,OADlH,CAC0DO,SAD1D,EAC0DA,SAD1D,mCACsE,IADtE,uBAC4EC,YAD5E,GACkHR,OADlH,CAC4EQ,YAD5E,EAC0FC,UAD1F,GACkHT,OADlH,CAC0FS,UAD1F,EACsGC,OADtG,GACkHV,OADlH,CACsGU,OADtG;;AAAA,iBAGTT,QAHS;AAAA;AAAA;AAAA;;AAILU,YAAAA,QAJK,GAIMF,UAAU,KAAKG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CC,QAAQ,CAACC,MAAT,KAAoBN,OAAnE,CAAV,aAA2FD,UAA3F,mBAAqH,aAJ3H,EAMX;;AACMQ,YAAAA,cAPK;AAAA,kFAOY,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACGC,KAAK,WAAIR,QAAJ,WAAL,CAA0BS,IAA1B,CAA+B,UAAAC,CAAC;AAAA,iCAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,yBAAhC,CADH;;AAAA;AACjBC,wBAAAA,WADiB;AAErB,4BAAIlB,QAAJ,EAAckB,WAAW,GAAG1B,KAAK,CAAC2B,UAAN,CAAiBD,WAAjB,CAAd;AACdL,wBAAAA,MAAM,UAAN,CAAcK,WAAd,EAA2B;AAAEE,0BAAAA,SAAS,EAAE;AAAb,yBAA3B;;AAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPZ;;AAAA,8BAOLR,cAPK;AAAA;AAAA;AAAA;;AAaLS,YAAAA,aAbK;AAAA,kFAaW,kBAAMR,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,KAAK,WAAIR,QAAJ,oBAAL,CAAmCS,IAAnC,CAAwC,UAAAC,CAAC;AAAA,iCAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,yBAAzC,CADV;;AAAA;AAAA;AACZK,wBAAAA,KADY,qBACZA,KADY;AACLC,wBAAAA,IADK,qBACLA,IADK;;AAEdC,wBAAAA,SAFc,GAEF,SAAZA,SAAY,CAAAC,EAAE;AAAA,iCAAIX,KAAK,WAAIR,QAAJ,cAAgBmB,EAAhB,WAAL,CAAgCV,IAAhC,CAAqC,UAAAC,CAAC;AAAA,mCAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,2BAAtC,EAAoDF,IAApD,CAAyD,UAAAW,CAAC;AAAA,mCAAI1B,QAAQ,GAAGR,KAAK,CAAC2B,UAAN,CAAiBO,CAAjB,CAAH,GAAyBA,CAArC;AAAA,2BAA1D,CAAJ;AAAA,yBAFA;;AAAA;AAAA,+BAIMjC,IAAI,CAAC6B,KAAD,EAAQ,UAAAG,EAAE;AAAA,iCAAID,SAAS,EAAb;AAAA,yBAAV,CAJV;;AAAA;AAIdN,wBAAAA,WAJc;AAKpBL,wBAAAA,MAAM,UAAN,CAAcK,WAAd,EAA2B;AAAEI,0BAAAA,KAAK,EAAE,IAAT;AAAeK,0BAAAA,GAAG,EAAE,KAApB;AAA2BP,0BAAAA,SAAS,EAAE;AAAtC,yBAA3B;AAEIQ,wBAAAA,UAPgB,GAOH,EAPG;AAAA;AAAA;AAAA;AAAA,mDAQGL,IARH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAQHE,wBAAAA,EARG;AAAA;AAAA,+BASCD,SAAS,CAACC,EAAD,CATV;;AAAA;AASZI,wBAAAA,IATY;AAUlBD,wBAAAA,UAAU,mCAAQA,UAAR,GAAuBE,MAAM,CAACC,WAAP,CAAmBF,IAAnB,CAAvB,CAAV;;AAVkB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAYpBhB,wBAAAA,MAAM,UAAN,CAAc,CAACe,UAAD,CAAd,EAA4B;AAAEN,0BAAAA,KAAK,EAAE,KAAT;AAAgBK,0BAAAA,GAAG,EAAE,IAArB;AAA2BP,0BAAAA,SAAS,EAAE;AAAtC,yBAA5B;;AAZoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAbX;;AAAA,8BAaLC,aAbK;AAAA;AAAA;AAAA,iBA4BX;;;AA5BW,gBA6BNnB,SA7BM;AAAA;AAAA;AAAA;;AA8BTR,YAAAA,GAAG,CAACsC,SAAJ,CAAcC,WAAd,GAA4B;AAC1BnC,cAAAA,UAAU,kCACLA,UADK;AAER6B,gBAAAA,GAAG,EAAE;AACHF,kBAAAA,EAAE,EAAE,IADD;AAEHS,kBAAAA,KAAK,EAAE/B;AAFJ;AAFG,gBADgB;AAQ1BG,cAAAA,QAAQ,EAARA,QAR0B;AAS1B6B,cAAAA,SAAS,EAAEvB;AATe,aAA5B;AA9BS;;AAAA;AA4CX;AACMC,YAAAA,MA7CK,GA6CI,IAAItB,UAAJ,iCACVO,UADU;AAEb6B,cAAAA,GAAG,EAAE;AACHF,gBAAAA,EAAE,EAAE,IADD;AAEHS,gBAAAA,KAAK,EAAE/B;AAFJ;AAFQ,eA7CJ;AAoDXT,YAAAA,GAAG,CAACsC,SAAJ,CAAcI,OAAd,GAAwBvB,MAAxB;AACAnB,YAAAA,GAAG,CAACsC,SAAJ,CAAcK,cAAd,GAA+B;AAAE/B,cAAAA,QAAQ,EAARA;AAAF,aAA/B;;AArDW,gBAuDNL,SAvDM;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAyDP,OAAOA,SAAP,KAAqB,QAArB,IAAiC,QAAOA,SAAP,MAAqB,QAzD/C;AAAA;AAAA;AAAA;;AA0DLqC,YAAAA,MA1DK,GA0DI,KA1DJ;AA2DHC,YAAAA,WA3DG,GA2DW,OAAOtC,SAAP,KAAqB,QAArB,GAAgC,CAACA,SAAD,CAAhC,GAA8CA,SA3DzD;AAAA,8CA4DFJ,MAAM,CAAC2C,SAAP,CAAiB,iBAA2B;AAAA,kBAAlBC,WAAkB,SAAxBC,IAAwB;;AACjD,kBAAIH,WAAW,CAACI,QAAZ,CAAqBF,WAArB,KAAqC,CAACH,MAA1C,EAAkD;AAChDA,gBAAAA,MAAM,GAAG,IAAT;AACA,uBAAOvC,KAAK,GAAGsB,aAAa,CAACR,MAAD,CAAhB,GAA2BD,cAAc,CAACC,MAAD,CAArD;AACD;AACF,aALM,CA5DE;;AAAA;AAAA,iBAkEAd,KAlEA;AAAA;AAAA;AAAA;;AAAA,8CAkEcsB,aAAa,CAACR,MAAD,CAlE3B;;AAAA;AAAA,8CAmECD,cAAc,CAACC,MAAD,CAnEf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import FlexSearch from 'flexsearch'\nimport cjson from 'compressed-json'\nimport pMap from 'p-map'\n\nexport default async function (Vue, options, { isClient, router }) {\n  const { flexsearch, chunk = false, compress = false, autoFetch = true, autoSetup = true, searchFields, pathPrefix, siteUrl } = options\n\n  if (isClient) {\n    const basePath = pathPrefix && (process.env.NODE_ENV !== 'development' || location.origin === siteUrl) ? `${pathPrefix}/flexsearch` : '/flexsearch'\n\n    // Data fetch functions\n    const loadNormalMode = async search => {\n      let searchIndex = await fetch(`${basePath}.json`).then(r => r.json())\n      if (compress) searchIndex = cjson.decompress(searchIndex)\n      search.import(searchIndex, { serialize: false })\n    }\n\n    const loadChunkMode = async search => {\n      const { index, docs } = await fetch(`${basePath}/manifest.json`).then(r => r.json())\n      const fetchData = id => fetch(`${basePath}/${id}.json`).then(r => r.json()).then(j => compress ? cjson.decompress(j) : j)\n\n      const searchIndex = await pMap(index, id => fetchData())\n      search.import(searchIndex, { index: true, doc: false, serialize: false })\n\n      let searchDocs = {}\n      for await (const id of docs) {\n        const data = await fetchData(id)\n        searchDocs = { ...searchDocs, ...Object.fromEntries(data) }\n      }\n      search.import([searchDocs], { index: false, doc: true, serialize: false })\n    }\n\n    // Manually setup the Flexsearch instance\n    if (!autoSetup) {\n      Vue.prototype.$flexsearch = {\n        flexsearch: {\n          ...flexsearch,\n          doc: {\n            id: 'id',\n            field: searchFields\n          }\n        },\n        basePath,\n        loadIndex: loadNormalMode\n      }\n      return\n    }\n\n    // Setup global Flexsearch Instance\n    const search = new FlexSearch({\n      ...flexsearch,\n      doc: {\n        id: 'id',\n        field: searchFields\n      }\n    })\n    Vue.prototype.$search = search\n    Vue.prototype.$searchOptions = { basePath }\n\n    if (!autoFetch) return\n\n    if (typeof autoFetch === 'string' || typeof autoFetch === 'object') {\n      let loaded = false\n      const pathsToLoad = typeof autoFetch === 'string' ? [autoFetch] : autoFetch\n      return router.afterEach(({ path: currentPath }) => {\n        if (pathsToLoad.includes(currentPath) && !loaded) {\n          loaded = true\n          return chunk ? loadChunkMode(search) : loadNormalMode(search)\n        }\n      })\n    } else if (chunk) return loadChunkMode(search)\n    else return loadNormalMode(search)\n  }\n}\n"]}]}