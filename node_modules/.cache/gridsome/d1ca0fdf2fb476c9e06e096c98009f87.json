{"remainingRequest":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-i18n/gridsome.client.js","dependencies":[{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-i18n/gridsome.client.js","mtime":1603648052332},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/cache-loader/dist/cjs.js","mtime":1603648050611},{"path":"/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/babel-loader/lib/index.js","mtime":1603648050172}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.find\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.split\";\nimport \"core-js/modules/es.string.starts-with\";\nimport VueI18n from 'vue-i18n';\n/**\n * i18n client plugin initialization\n *\n * @param Vue\n * @param options\n */\n\nexport default function (Vue, options, _ref) {\n  var appOptions = _ref.appOptions,\n      router = _ref.router,\n      head = _ref.head;\n  // Setup options fallback\n  options.defaultLocale = options.defaultLocale || options.locales[0];\n  options.fallbackLocale = options.fallbackLocale || options.defaultLocale; // Add VueI18n plugin to Vue instance\n\n  Vue.use(VueI18n);\n  var i18n = new VueI18n(Object.assign(options, {\n    locale: options.defaultLocale\n  }));\n  appOptions.i18n = i18n; // Translate path to correct\n\n  function translatePath(pathToResolve, targetLocale, forceChange) {\n    targetLocale = targetLocale || i18n.locale;\n\n    if (!targetLocale) {\n      return pathToResolve;\n    } // Disable rewrite for default language\n\n\n    if (targetLocale === options.defaultLocale && options.rewriteDefaultLanguage === false && !forceChange) {\n      return pathToResolve;\n    } // Check path segments\n\n\n    if (!pathToResolve.startsWith('/')) {\n      pathToResolve = '/' + pathToResolve;\n    }\n\n    var pathSegment = options.pathAliases[targetLocale] || targetLocale;\n    var pathPrefix = '/' + pathSegment; // if path already contain path prefix skip rewrite\n\n    var pathToResolveSegments = pathToResolve.split('/');\n    var pathToResolveLocale = options.locales.find(function (locale) {\n      var pathSegment = options.pathAliases[locale] || locale; // First element is an empty string, second is the first path segment\n\n      return pathToResolveSegments[1] === pathSegment;\n    });\n\n    if (pathToResolveLocale !== undefined) {\n      if (forceChange !== true) {\n        return pathToResolve;\n      }\n\n      if (pathToResolveSegments.length === 0) {\n        return '/';\n      }\n\n      pathToResolve = pathToResolveSegments.slice(2).join('/');\n\n      if (!pathToResolve.startsWith('/')) {\n        pathToResolve = '/' + pathToResolve;\n      }\n    } // Skip adding prefix to default locale\n\n\n    if (targetLocale === options.defaultLocale && options.rewriteDefaultLanguage === false) {\n      return pathToResolve;\n    } // Add locale prefix\n\n\n    return pathPrefix + pathToResolve;\n  } // Add translate path helper\n\n\n  Vue.prototype.$tp = translatePath; // Change locale based on route meta tag\n\n  router.beforeEach(function (to, from, next) {\n    // Change locale\n    if (to.meta && to.meta.locale && to.meta.locale !== i18n.locale) {\n      i18n.locale = to.meta.locale;\n    }\n\n    next();\n  });\n\n  function conditionalLangAttrUpdate(updateFunction) {\n    var lang = i18n.locale || options.defaultLocale;\n    updateFunction(lang);\n  } // Maintain path prefix during router change\n\n\n  router.beforeResolve(function (to, from, next) {\n    // do not rewrite build paths\n    if (process.isServer) {\n      return next();\n    } // if option is disabled skip whole logic\n\n\n    if (options.enablePathRewrite === false) {\n      return next();\n    } // On route load, set the correct lang attribute for html tag using the current locale\n\n\n    conditionalLangAttrUpdate(function (lang) {\n      return Object.assign(head.htmlAttrs, {\n        lang: lang\n      });\n    });\n    var translatedPath = translatePath(to.path || '/');\n\n    if (translatedPath === to.path) {\n      return next();\n    } // Rewrite path\n\n\n    next({\n      path: translatedPath\n    });\n  }); // Update the lang attribute on each route change:\n  // head.htmlAttrs = { 'lang' : lang } doesn't seem to work dynamically here, only on page change or refresh\n\n  if (process.isClient) {\n    router.afterEach(function () {\n      conditionalLangAttrUpdate(function (lang) {\n        return document.documentElement.setAttribute('lang', lang);\n      });\n    });\n  }\n}",{"version":3,"sources":["/Users/dev/Projects/new/zvekov/frontend_gridsome/node_modules/gridsome-plugin-i18n/gridsome.client.js"],"names":["VueI18n","Vue","options","appOptions","router","head","defaultLocale","locales","fallbackLocale","use","i18n","Object","assign","locale","translatePath","pathToResolve","targetLocale","forceChange","rewriteDefaultLanguage","startsWith","pathSegment","pathAliases","pathPrefix","pathToResolveSegments","split","pathToResolveLocale","find","undefined","length","slice","join","prototype","$tp","beforeEach","to","from","next","meta","conditionalLangAttrUpdate","updateFunction","lang","beforeResolve","process","isServer","enablePathRewrite","htmlAttrs","translatedPath","path","isClient","afterEach","document","documentElement","setAttribute"],"mappings":"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","sourcesContent":["import VueI18n from 'vue-i18n'\n/**\n * i18n client plugin initialization\n *\n * @param Vue\n * @param options\n */\nexport default function (Vue, options, { appOptions, router, head }) {\n  // Setup options fallback\n  options.defaultLocale = options.defaultLocale || options.locales[0]\n  options.fallbackLocale = options.fallbackLocale || options.defaultLocale\n\n  // Add VueI18n plugin to Vue instance\n  Vue.use(VueI18n)\n  const i18n = new VueI18n(Object.assign(options, {\n    locale: options.defaultLocale\n  }))\n  appOptions.i18n = i18n\n\n  // Translate path to correct\n  function translatePath(pathToResolve, targetLocale, forceChange) {\n    targetLocale = targetLocale || i18n.locale\n    if (!targetLocale) {\n      return pathToResolve\n    }\n\n    // Disable rewrite for default language\n    if (\n      targetLocale === options.defaultLocale && \n      options.rewriteDefaultLanguage === false && \n      !forceChange\n    ) {\n      return pathToResolve\n    }\n\n    // Check path segments\n    if (!pathToResolve.startsWith('/')) {\n      pathToResolve = '/' + pathToResolve\n    }\n    const pathSegment = options.pathAliases[targetLocale] || targetLocale\n    const pathPrefix = '/' + pathSegment\n\n    // if path already contain path prefix skip rewrite\n    const pathToResolveSegments = pathToResolve.split('/')\n    const pathToResolveLocale = options.locales.find(locale => {\n      const pathSegment = options.pathAliases[locale] || locale\n      // First element is an empty string, second is the first path segment\n      return pathToResolveSegments[1] === pathSegment\n    })\n\n    if (pathToResolveLocale !== undefined){\n      if (forceChange !== true) {\n        return pathToResolve\n      }\n      if (pathToResolveSegments.length === 0) {\n        return '/'\n      }\n      pathToResolve = pathToResolveSegments.slice(2).join('/')\n      if (!pathToResolve.startsWith('/')) {\n        pathToResolve = '/' + pathToResolve\n      }\n    }\n\n    // Skip adding prefix to default locale\n    if (\n      targetLocale === options.defaultLocale && \n      options.rewriteDefaultLanguage === false\n    ) {\n      return pathToResolve\n    }\n\n    // Add locale prefix\n    return pathPrefix + pathToResolve\n  }\n\n  // Add translate path helper\n  Vue.prototype.$tp = translatePath\n\n  // Change locale based on route meta tag\n  router.beforeEach((to, from, next) => {\n    // Change locale\n    if ((to.meta && to.meta.locale) && to.meta.locale !== i18n.locale) {\n      i18n.locale = to.meta.locale\n    }\n    next()\n  })\n\n  function conditionalLangAttrUpdate(updateFunction) {\n      const lang = i18n.locale || options.defaultLocale;\n      updateFunction(lang);\n  }\n\n// Maintain path prefix during router change\n  router.beforeResolve((to, from, next) => {\n    // do not rewrite build paths\n    if (process.isServer) {\n      return next()\n    }\n\n    // if option is disabled skip whole logic\n    if (options.enablePathRewrite === false) {\n      return next()\n    }\n\n    // On route load, set the correct lang attribute for html tag using the current locale\n    conditionalLangAttrUpdate((lang) => Object.assign(head.htmlAttrs, {lang: lang}));\n\n    const translatedPath = translatePath(to.path || '/')\n    if (translatedPath === to.path) {\n      return next()\n    }\n\n    // Rewrite path\n    next({\n      path: translatedPath\n    })\n  })\n\n  // Update the lang attribute on each route change:\n  // head.htmlAttrs = { 'lang' : lang } doesn't seem to work dynamically here, only on page change or refresh\n  if (process.isClient) {\n    router.afterEach(() => {\n      conditionalLangAttrUpdate((lang) => document.documentElement.setAttribute('lang', lang))\n    })\n  }\n}\n"]}]}