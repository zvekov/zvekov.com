{"version":3,"sources":["../src/gridsome.server.js"],"names":["defaultEnv","defaultOptions","output","writeFile","file","data","Promise","resolve","reject","fs","err","getOptions","pluginOptions","options","plugins","env","resolveEnv","process","SITE_ENV","NODE_ENV","envOptions","RobotsPlugin","api","afterBuild","config","userOptions","Object","prototype","hasOwnProperty","call","host","siteUrl","url","sitemap","policy","configFile","content","filename","path","join","outputDir","outDir","module","exports"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,UAAU,GAAG,aAAnB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE;AADa,CAAvB;;AAIA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AAC7B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,gBAAGN,SAAH,CAAaC,IAAb,EAAmBC,IAAnB,EAAyBK,GAAG,IAAI;AAC9B,UAAIA,GAAJ,EAAS;AACPF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO;AACR;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAED,MAAMI,UAAU,GAAGC,aAAa,IAAI;AAClC,QAAMC,OAAO,GAAG,EAAC,GAAGZ,cAAJ;AAAoB,OAAGW;AAAvB,GAAhB;AAEA,SAAOC,OAAO,CAACC,OAAf;AAEA,QAAM;AAACC,IAAAA,GAAG,GAAG,EAAP;AAAWC,IAAAA,UAAU,GAAG,MAAMC,OAAO,CAACF,GAAR,CAAYG,QAAZ,IAAwBD,OAAO,CAACF,GAAR,CAAYI;AAAlE,MAA8EN,OAApF;AAEA,QAAMO,UAAU,GAAGL,GAAG,CAACC,UAAU,EAAX,CAAH,IAAqBD,GAAG,CAACf,UAAD,CAAxB,IAAwC,EAA3D;AAEA,SAAOa,OAAO,CAACE,GAAf;AACA,SAAOF,OAAO,CAACG,UAAf;AAEA,SAAO,EAAC,GAAGH,OAAJ;AAAa,OAAGO;AAAhB,GAAP;AACD,CAbD;AAeA;;;;;;;AAKA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BT,OAA3B,EAAoC;AAElC;;;;AAIAS,EAAAA,GAAG,CAACC,UAAJ,CAAe,OAAO;AAACC,IAAAA;AAAD,GAAP,KAAoB;AAEjC,UAAMC,WAAW,GAAGd,UAAU,CAACE,OAAD,CAA9B;;AAEA,QACE,CAACa,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,WAArC,EAAkD,MAAlD,CAAD,IACA,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,WAArC,EAAkD,SAAlD,CAFH,EAGE;AACAA,MAAAA,WAAW,CAACK,IAAZ,GAAmBN,MAAM,CAACO,OAAP,IAAkBP,MAAM,CAACQ,GAA5C;AACAP,MAAAA,WAAW,CAACQ,OAAZ,GAAsBD,aAAIzB,OAAJ,CAAYiB,MAAM,CAACO,OAAnB,EAA4B,aAA5B,CAAtB;AACD;;AAED,UAAM;AAACG,MAAAA,MAAD;AAASD,MAAAA,OAAT;AAAkBH,MAAAA,IAAlB;AAAwB5B,MAAAA,MAAxB;AAAgCiC,MAAAA;AAAhC,QAA8CV,WAApD;AAEA,UAAMW,OAAO,GAAG,MAAM,gCAAU;AAC9BF,MAAAA,MAD8B;AAE9BD,MAAAA,OAF8B;AAG9BH,MAAAA,IAH8B;AAI9BK,MAAAA;AAJ8B,KAAV,CAAtB;;AAMA,UAAME,QAAQ,GAAGC,cAAKC,IAAL,CAAUf,MAAM,CAACgB,SAAP,IAAoBhB,MAAM,CAACiB,MAArC,EAA6CvC,MAA7C,CAAjB;;AAEA,WAAOC,SAAS,CAACmC,cAAK/B,OAAL,CAAa8B,QAAb,CAAD,EAAyBD,OAAzB,CAAhB;AACD,GAvBD;AAwBD;;AAEDf,YAAY,CAACpB,cAAb,GAA8BA,cAA9B;AAEAyC,MAAM,CAACC,OAAP,GAAiBtB,YAAjB","sourcesContent":["import fs from 'fs';\nimport robotsTxt from 'generate-robotstxt';\nimport path from 'path';\nimport url from 'url';\n\nconst defaultEnv = 'development';\n\nconst defaultOptions = {\n  output: '/robots.txt',\n};\n\nfunction writeFile(file, data) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(file, data, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nconst getOptions = pluginOptions => {\n  const options = {...defaultOptions, ...pluginOptions};\n\n  delete options.plugins;\n\n  const {env = {}, resolveEnv = () => process.env.SITE_ENV || process.env.NODE_ENV} = options;\n\n  const envOptions = env[resolveEnv()] || env[defaultEnv] || {};\n\n  delete options.env;\n  delete options.resolveEnv;\n\n  return {...options, ...envOptions};\n};\n\n/**\n * Gridsome plugin\n * @param {*} api The gridsome server api\n * @param {*} options The plugin options without merging default options\n */\nfunction RobotsPlugin(api, options) {\n\n  /**\n   * The after build hook with gridsome config and queue??\n   * config.{pathPrefix,publicPath,staticDir,outDir,assetsDir,imagesDir,filesDir,dataDir,appPath}\n   */\n  api.afterBuild(async ({config}) => {\n\n    const userOptions = getOptions(options);\n\n    if (\n      !Object.prototype.hasOwnProperty.call(userOptions, 'host') ||\n      !Object.prototype.hasOwnProperty.call(userOptions, 'sitemap')\n    ) {\n      userOptions.host = config.siteUrl || config.url;\n      userOptions.sitemap = url.resolve(config.siteUrl, 'sitemap.xml');\n    }\n\n    const {policy, sitemap, host, output, configFile} = userOptions;\n\n    const content = await robotsTxt({\n      policy,\n      sitemap,\n      host,\n      configFile,\n    });\n    const filename = path.join(config.outputDir || config.outDir, output);\n\n    return writeFile(path.resolve(filename), content);\n  });\n}\n\nRobotsPlugin.defaultOptions = defaultOptions;\n\nmodule.exports = RobotsPlugin;\n"],"file":"gridsome.server.js"}